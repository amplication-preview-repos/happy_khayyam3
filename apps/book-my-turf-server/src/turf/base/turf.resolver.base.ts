/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Turf } from "./Turf";
import { TurfCountArgs } from "./TurfCountArgs";
import { TurfFindManyArgs } from "./TurfFindManyArgs";
import { TurfFindUniqueArgs } from "./TurfFindUniqueArgs";
import { CreateTurfArgs } from "./CreateTurfArgs";
import { UpdateTurfArgs } from "./UpdateTurfArgs";
import { DeleteTurfArgs } from "./DeleteTurfArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { TurfService } from "../turf.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Turf)
export class TurfResolverBase {
  constructor(
    protected readonly service: TurfService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Turf",
    action: "read",
    possession: "any",
  })
  async _turfsMeta(
    @graphql.Args() args: TurfCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Turf])
  @nestAccessControl.UseRoles({
    resource: "Turf",
    action: "read",
    possession: "any",
  })
  async turfs(@graphql.Args() args: TurfFindManyArgs): Promise<Turf[]> {
    return this.service.turfs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Turf, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Turf",
    action: "read",
    possession: "own",
  })
  async turf(@graphql.Args() args: TurfFindUniqueArgs): Promise<Turf | null> {
    const result = await this.service.turf(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Turf)
  @nestAccessControl.UseRoles({
    resource: "Turf",
    action: "create",
    possession: "any",
  })
  async createTurf(@graphql.Args() args: CreateTurfArgs): Promise<Turf> {
    return await this.service.createTurf({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Turf)
  @nestAccessControl.UseRoles({
    resource: "Turf",
    action: "update",
    possession: "any",
  })
  async updateTurf(@graphql.Args() args: UpdateTurfArgs): Promise<Turf | null> {
    try {
      return await this.service.updateTurf({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Turf)
  @nestAccessControl.UseRoles({
    resource: "Turf",
    action: "delete",
    possession: "any",
  })
  async deleteTurf(@graphql.Args() args: DeleteTurfArgs): Promise<Turf | null> {
    try {
      return await this.service.deleteTurf(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async findBookings(
    @graphql.Parent() parent: Turf,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
