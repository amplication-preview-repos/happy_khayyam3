/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ManagerService } from "../manager.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ManagerCreateInput } from "./ManagerCreateInput";
import { Manager } from "./Manager";
import { ManagerFindManyArgs } from "./ManagerFindManyArgs";
import { ManagerWhereUniqueInput } from "./ManagerWhereUniqueInput";
import { ManagerUpdateInput } from "./ManagerUpdateInput";
import { AdminFindManyArgs } from "../../admin/base/AdminFindManyArgs";
import { Admin } from "../../admin/base/Admin";
import { AdminWhereUniqueInput } from "../../admin/base/AdminWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ManagerControllerBase {
  constructor(
    protected readonly service: ManagerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Manager })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createManager(
    @common.Body() data: ManagerCreateInput
  ): Promise<Manager> {
    return await this.service.createManager({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        rates: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Manager] })
  @ApiNestedQuery(ManagerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async managers(@common.Req() request: Request): Promise<Manager[]> {
    const args = plainToClass(ManagerFindManyArgs, request.query);
    return this.service.managers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        rates: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Manager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async manager(
    @common.Param() params: ManagerWhereUniqueInput
  ): Promise<Manager | null> {
    const result = await this.service.manager({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        rates: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Manager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateManager(
    @common.Param() params: ManagerWhereUniqueInput,
    @common.Body() data: ManagerUpdateInput
  ): Promise<Manager | null> {
    try {
      return await this.service.updateManager({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          rates: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Manager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteManager(
    @common.Param() params: ManagerWhereUniqueInput
  ): Promise<Manager | null> {
    try {
      return await this.service.deleteManager({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          rates: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/admins")
  @ApiNestedQuery(AdminFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Admin",
    action: "read",
    possession: "any",
  })
  async findAdmins(
    @common.Req() request: Request,
    @common.Param() params: ManagerWhereUniqueInput
  ): Promise<Admin[]> {
    const query = plainToClass(AdminFindManyArgs, request.query);
    const results = await this.service.findAdmins(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        location: true,

        manager: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/admins")
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "update",
    possession: "any",
  })
  async connectAdmins(
    @common.Param() params: ManagerWhereUniqueInput,
    @common.Body() body: AdminWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admins: {
        connect: body,
      },
    };
    await this.service.updateManager({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/admins")
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "update",
    possession: "any",
  })
  async updateAdmins(
    @common.Param() params: ManagerWhereUniqueInput,
    @common.Body() body: AdminWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admins: {
        set: body,
      },
    };
    await this.service.updateManager({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/admins")
  @nestAccessControl.UseRoles({
    resource: "Manager",
    action: "update",
    possession: "any",
  })
  async disconnectAdmins(
    @common.Param() params: ManagerWhereUniqueInput,
    @common.Body() body: AdminWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      admins: {
        disconnect: body,
      },
    };
    await this.service.updateManager({
      where: params,
      data,
      select: { id: true },
    });
  }
}
